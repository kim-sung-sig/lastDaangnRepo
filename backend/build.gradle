plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.0'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'com.github.spotbugs' version '5.0.13'
	id 'pmd'
	id 'checkstyle'
}

group = 'com.demo.daangn'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'

	// mail
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	// oauth2
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	// thymeleaf
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

	// WebSocket
	implementation 'org.springframework.boot:spring-boot-starter-websocket'

	// mysql
	// runtimeOnly 'com.mysql:mysql-connector-j'

	// postgresql
	runtimeOnly 'org.postgresql:postgresql'

	// redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	// redis session
	implementation 'org.springframework.session:spring-session-data-redis'

	// spring amqp
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
	testImplementation 'org.springframework.amqp:spring-rabbit-test'

	// kafka
	// implementation 'org.springframework.boot:spring-boot-starter-data-kafka'

	// JPA
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// mybatis
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'
	testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.3'

	// Valid
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

	// spring batch
	implementation 'org.springframework.boot:spring-boot-starter-batch'

	// webp
	implementation 'com.sksamuel.scrimage:scrimage-core:4.3.0'
	implementation 'com.sksamuel.scrimage:scrimage-webp:4.3.0'

	// CODEC BASE62
	implementation 'org.unbroken-dome.base62:base62:1.1.0'



}

pmd {
    toolVersion = "6.55.0"
    // ruleSetFiles = files("$rootDir/config/pmd/ruleset.xml")
    ignoreFailures = true
}

tasks.withType(Checkstyle) {
    // configFile = file("$rootDir/config/checkstyle/checkstyle.xml")
    ignoreFailures = true
}

spotbugs {
	toolVersion = "4.8.6" // 사용하려는 SpotBugs의 버전 명시
    ignoreFailures = true
    effort = "max"
    reportLevel = "low"
}

// task 설정
tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}

tasks.named('check') {
    dependsOn 'pmdMain', 'checkstyleMain' // PMD와 Checkstyle을 빌드 과정에 포함
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask).configureEach {
    reports {
        html.required.set(true) // HTML 보고서를 활성화
        xml.required.set(false) // XML 보고서를 비활성화
    }
}


